package controller

import (
	"encoding/json"
	"sync/atomic"

	"github.com/astaxie/beego/validation"
	"github.com/sirupsen/logrus"

	"cvevulner/cve-ddd/app"
)

const allowConcurrency = 1

var concurrency atomic.Int32

func NewCveController(s app.ColdPatchService, l *logrus.Entry) *CveController {
	return &CveController{
		Service: s,
		Log:     l,
	}
}

type CveController struct {
	BaseController

	Log     *logrus.Entry
	Service app.ColdPatchService
}

func (c *CveController) CollectCveData() {
	var request CollectRequest
	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &request); err != nil {
		c.fail(err.Error())

		return
	}

	valid := validation.Validation{}
	b, err := valid.Valid(&request)
	if err != nil || !b {
		c.fail("param error")

		return
	}

	c.Service.CollectCveData(request)

	c.success(nil)
}

func (c *CveController) Generate() {
	concurrency.Add(1)
	defer concurrency.Add(-1)

	// 公告接口不允许并发访问
	if concurrency.Load() > allowConcurrency {
		c.fail("job is running")

		return
	}

	var request GenerateRequest
	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &request); err != nil {
		c.fail(err.Error())

		return
	}

	valid := validation.Validation{}
	b, err := valid.Valid(&request)
	if err != nil || !b {
		c.fail("param error")

		return
	}

	err = c.Service.GenerateBulletins(request.CveNum, request.Date)
	if err != nil {
		c.Log.Errorf("generate bulletins failed: %v", err)
		c.fail(err.Error())
	} else {
		c.success(nil)
	}
}
