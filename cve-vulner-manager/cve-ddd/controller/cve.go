package controller

import (
	"encoding/json"
	"sync/atomic"

	"github.com/astaxie/beego/validation"
	"github.com/opensourceways/server-common-lib/utils"
	"github.com/sirupsen/logrus"

	"cvevulner/cve-ddd/app"
)

const allowConcurrency = 1

var concurrency atomic.Int32

func NewCveController(
	c app.ColdPatchService,
	b app.BulletinService,
	h app.RefactorHotPatchService,
	hl *logrus.Entry,
	bl *logrus.Entry,
) *CveController {
	return &CveController{
		hotPatchBulletinLog: hl,
		bulletinLog:         bl,
		ColdPatchService:    c,
		BulletinService:     b,
		HotPatchService:     h,
	}
}

type CveController struct {
	BaseController

	hotPatchBulletinLog *logrus.Entry
	bulletinLog         *logrus.Entry
	ColdPatchService    app.ColdPatchService
	BulletinService     app.BulletinService
	HotPatchService     app.RefactorHotPatchService
}

func (c *CveController) CollectCveData() {
	var request CollectRequest
	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &request); err != nil {
		c.fail(err.Error())

		return
	}

	valid := validation.Validation{}
	b, err := valid.Valid(&request)
	if err != nil || !b {
		c.fail("param error")

		return
	}

	c.ColdPatchService.CollectCveData(request)

	c.success(nil)
}

func (c *CveController) Generate() {
	concurrency.Add(1)
	defer concurrency.Add(-1)

	// 公告接口不允许并发访问
	if concurrency.Load() > allowConcurrency {
		c.fail("job is running")

		return
	}

	var request GenerateRequest
	if err := json.Unmarshal(c.Ctx.Input.RequestBody, &request); err != nil {
		c.fail(err.Error())

		return
	}

	valid := validation.Validation{}
	b, err := valid.Valid(&request)
	if err != nil || !b {
		c.fail("param error")

		return
	}

	mr := utils.NewMultiErrors()
	uploadDir, err := c.BulletinService.GenerateBulletins(request.CveNum, request.Date)
	if err != nil {
		c.bulletinLog.Errorf("generate security bulletins failed: %s", err.Error())
		mr.AddError(err)
	} else {
		err = c.HotPatchService.GenerateBulletins(uploadDir)
		if err != nil {
			c.hotPatchBulletinLog.Errorf("generate hot patch security bulletins failed: %s", err.Error())
			mr.AddError(err)
		}
	}

	if mr.Err() != nil {
		c.fail(mr.Err().Error())
	} else {
		c.success(nil)
	}
}
