package app

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/sirupsen/logrus"

	"cvevulner/cve-ddd/domain/bulletin"
	"cvevulner/cve-ddd/domain/obs"
	"cvevulner/cve-ddd/domain/repository"
	"cvevulner/util"
)

type HotPatchService interface {
	GenerateBulletins([]CmdToGenerateBulletins) error
}

func NewHotPatchService(r repository.CveRepository, b bulletin.Bulletin, o obs.OBS) *hotPatchService {
	return &hotPatchService{
		repository: r,
		bulletin:   b,
		obs:        o,
	}
}

type hotPatchService struct {
	repository repository.CveRepository
	bulletin   bulletin.Bulletin
	obs        obs.OBS
}

func (h *hotPatchService) GenerateBulletins(cmds []CmdToGenerateBulletins) error {
	for _, cmd := range cmds {
		if exist := h.repository.IssueNumExist(cmd.IssueNum); exist {
			continue
		}

		cves, err := h.repository.FindCves(
			repository.Option{
				CveNum:          cmd.CveNum,
				Component:       cmd.Component,
				AffectedVersion: cmd.Branch,
			})
		if err != nil {
			return err
		}

		bulletins := cves.GenerateBulletins()
		for _, b := range bulletins {
			b.PatchUrl = cmd.PatchUrl

			id, err := h.generateBulletinId()
			if err != nil {
				return err
			}
			b.Identification = id

			xmlData, err := h.bulletin.Generate(&b)
			if err != nil {
				logrus.Errorf("component: %s, to xml error: %s", b.Component, err.Error())

				continue
			}

			fileName := fmt.Sprintf("cvrf-%s.xml", b.Identification)
			if err := h.obs.Upload(fileName, xmlData); err != nil {
				logrus.Errorf("component: %s, upload to obs error: %s", b.Component, err.Error())

				continue
			}

			h.repository.SetMaxBulletinID(b.Identification)
		}
		h.repository.SaveIssueNum(cmd.IssueNum)
	}

	return nil
}

func (h *hotPatchService) generateBulletinId() (string, error) {
	bulletinNumFormat := "openEuler-HotPatchSA-%d-%d"

	maxID, err := h.repository.MaxBulletinID()
	if err != nil {
		return "", err
	}

	thisYear := util.Year()

	if maxID == "" {
		return fmt.Sprintf(bulletinNumFormat, thisYear, 1001), nil
	}

	split := strings.Split(maxID, "-")
	if split[2] != strconv.Itoa(thisYear) {
		return fmt.Sprintf(bulletinNumFormat, thisYear, 1001), nil
	}

	num, err := strconv.Atoi(split[3])
	if err != nil {
		return "", err
	}

	return fmt.Sprintf(bulletinNumFormat, thisYear, num+1), nil
}
